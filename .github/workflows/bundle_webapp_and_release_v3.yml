name: Bundle Webapp and Release

on:
  push:
    branches:
      - 'future3/main'
      - 'future3/develop'

jobs:

  check:
    if: ${{ github.repository_owner == 'MiczFlor' }}
    runs-on: ubuntu-latest

    outputs:
      tag_name: ${{ steps.vars.outputs.tag_name }}
      release_type: ${{ steps.vars.outputs.release_type }}
      check_abort: ${{ steps.vars.outputs.check_abort }}

    steps:
      - uses: actions/checkout@v4

      - name: Set Output vars
        id: vars
        env:
          BRANCH_NAME: ${{ github.ref_name }}
        run: |
          # Official SemVer Regex definition
          # https://semver.org/#is-there-a-suggested-regular-expression-regex-to-check-a-semver-string
          # Needed changes to the regex:
          # - '?:' capture command needed to be removed as it wasn't working in shell
          # - '\d' had to be replaced with [0-9]
          #
          # Release versions like 1.0.0, 3.5.0, 100.4.50000+metadata
          REGEX_VERSION_RELEASE="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"
          #
          # Prerelease versions like 1.0.0-alpha, 3.5.0-whatsoever.12, 100.4.50000-identifier.12+metadata
          REGEX_VERSION_PRERELEASE="^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$"


          # Get the version and calculate release type
          VERSION=$(python ./src/jukebox/jukebox/version.py)
          if echo "$VERSION" | grep -qoE "$REGEX_VERSION_RELEASE" ; then
            RELEASE_TYPE=release
          elif echo "$VERSION" | grep -qoE "$REGEX_VERSION_PRERELEASE" ; then
            RELEASE_TYPE=prerelease
          else
            RELEASE_TYPE=none
          fi

          if [ "$BRANCH_NAME" == 'future3/main' -a "$RELEASE_TYPE" == 'release' ] || [ "$BRANCH_NAME" == 'future3/develop' -a "$RELEASE_TYPE" == 'prerelease' ] ; then
            CHECK_ABORT=false
          else
            echo "::notice title=Abort due to not matching ${RELEASE_TYPE} version for branch!::'${VERSION}' on '${BRANCH_NAME}'"
            CHECK_ABORT=true
          fi

          echo "::group::Output values"
          echo "Version: ${VERSION}"
          echo "RELEASE_TYPE: ${RELEASE_TYPE}"
          echo "BRANCH_NAME: ${BRANCH_NAME}"
          echo "CHECK_ABORT: ${CHECK_ABORT}"

          echo "tag_name=v${VERSION}" >> $GITHUB_OUTPUT
          echo "release_type=${RELEASE_TYPE}" >> $GITHUB_OUTPUT
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "check_abort=${CHECK_ABORT}" >> $GITHUB_OUTPUT
          echo "::endgroup::"

  build:
    needs: [check]
    if: ${{ needs.check.outputs.check_abort == 'false' }}
    runs-on: ubuntu-latest

    outputs:
      tag_name: ${{ needs.check.outputs.tag_name }}
      release_type: ${{ needs.check.outputs.release_type }}
      commit_sha: ${{ steps.vars.outputs.commit_sha }}
      webapp_bundle_name: ${{ steps.vars.outputs.webapp_bundle_name }}
      webapp_bundle_name_latest: ${{ steps.vars.outputs.webapp_bundle_name_latest }}

    steps:
      - uses: actions/checkout@v4

      - name: Set Output vars
        id: vars
        env:
          COMMIT_SHA: ${{ github.sha }}
        run: |
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "webapp_bundle_name=webapp-build-${COMMIT_SHA:0:10}.tar.gz" >> $GITHUB_OUTPUT
          echo "webapp_bundle_name_latest=webapp-build-latest.tar.gz" >> $GITHUB_OUTPUT

      - name: Build WebApp
        id: build-webapp
        uses: ./.github/actions/build-webapp

      - name: Create Bundle
        working-directory: ${{ steps.build-webapp.outputs.webapp-root-path }}
        run: |
          tar -czvf ${{ steps.vars.outputs.webapp_bundle_name }} build

      - name: Artifact Upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.vars.outputs.webapp_bundle_name }}
          path: ${{ steps.build-webapp.outputs.webapp-root-path }}/${{ steps.vars.outputs.webapp_bundle_name }}
          retention-days: 5

  release:
    needs: [build]
    runs-on: ubuntu-latest

    concurrency:
      group: ${{ needs.build.outputs.tag_name }}

    permissions:
      contents: write

    steps:
      - name: Artifact Download
        uses: actions/download-artifact@v3
        with:
          name: ${{ needs.build.outputs.webapp_bundle_name }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          commit: ${{ needs.build.outputs.commit_sha }}
          tag: ${{ needs.build.outputs.tag_name }}
          body: "Automated Release for ${{ needs.build.outputs.tag_name }}"
          makeLatest: 'false'
          prerelease: ${{ needs.build.outputs.release_type == 'prerelease' }}
          generateReleaseNotes: ${{ needs.build.outputs.release_type == 'release' }}
          skipIfReleaseExists: false
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: false
          omitBodyDuringUpdate: true
          omitNameDuringUpdate: true
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Release by tag
        id: get_release
        uses: joutvhu/get-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.tag_name }}

      - name: Upload Release Asset
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_name: ${{ needs.build.outputs.webapp_bundle_name }}
          asset_path: ${{ needs.build.outputs.webapp_bundle_name }}
          asset_content_type: application/gzip
          overwrite: true

      - name: Upload Release Asset as Latest
        uses: shogo82148/actions-upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.upload_url }}
          asset_name: ${{ needs.build.outputs.webapp_bundle_name_latest }}
          asset_path: ${{ needs.build.outputs.webapp_bundle_name }}
          asset_content_type: application/gzip
          overwrite: true
