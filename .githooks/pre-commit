#!/usr/bin/env bash

# Script to be run by git hook: pre-commit
#
# TO ACTIVATE: cp .githooks/pre-commit .git/hooks/.
#
# Checks
# - flake8 on staged python files
#   Note: This only checks the modified files
# - docs build of if any python file is staged
#   Note: This builds the entire documentation if a changed file goes into the documentation
# - Markdownlint if any markdown file is staged
#   Note: This checks all markdown files as configured in .markdownlint-cli2.yaml

#
# If there are problem with this script, commit may still be done with
# git commit --no-verify


# Pass all staged python files through flake8
PY_FILES="$(git diff --diff-filter=d --staged --name-only -- **/*.py)"
flake8_code=0
if [[ -n $PY_FILES ]]; then
  echo -e "\n**************************************************************"
  echo "Modified Python source files. Running flake8 ... "
  echo -e "**************************************************************\n"
  ./run_flake8.sh $PY_FILES
  flake8_code=$?
  echo "Flake8 return code: $flake8_code"
fi

code=$(( flake8_code ))

doc_code=0
if [[ -n $PY_FILES ]]; then
  echo -e "\n**************************************************************"
  echo -e "Modified Python source files. Generation markdown docs from docstring ... \n"
  echo -e "**************************************************************\n"
  ./run_docgeneration.sh -c
  doc_code=$?
  echo "pydoc_markdown return code: $doc_code"
fi

code=$(( flake8_code + doc_code ))

# Pass all staged markdown files through markdownlint-cli2
MD_FILES="$(git diff --diff-filter=d --staged --name-only -- **/*.md)"
markdownlint_code=0
if [[ -n $MD_FILES ]]; then
  echo -e "\n**************************************************************"
  echo "Modified Markdown files. Running markdownlint-cli2 ... "
  echo -e "**************************************************************\n"
  ./run_markdownlint.sh
  markdownlint_code=$?
  echo "Markdownlint-cli2 return code: $markdownlint_code"
fi

code=$(( flake8_code + doc_code + markdownlint_code))

if [[ code -gt 0 ]]; then
  echo -e "\n**************************************************************"
  echo -e "ERROR(s) during pre-commit checks. Aborting commit!"
  echo -e "**************************************************************\n"
fi

exit $code

